@page "/"
@using TradeLogUi.Dto
@using Newtonsoft.Json
@using TradeLog
@using Grpc.Core.Utils
@inject TradeLogGrpcService.TradeLogGrpcServiceClient TradeLog
<style type="text/css">
    .mud-table-head .header-centered th {
        text-align: center;
        font-size: 1.2em;
    }

   .mud-table-foot .bold-text .mud-table-cell {
       font-weight: 500;
   }
</style>

<MudCardContent Class="pa-0">
    
    <MudSimpleTable Hover="true" Bordered="true" Striped="false" Style="overflow-x: auto;">
                      
                            <tbody>
                            <tr>
                               
                                <th>
                                    <MudTextField @bind-Value="_query.TraderId" Label="TraderId" T="string" Variant="Variant.Outlined"></MudTextField>
                                </th>
                                <th>
                                    <MudTextField @bind-Value="_query.AccountId" Label="AccountId" T="string" Variant="Variant.Outlined"></MudTextField>
                                </th>
                                <th>
                                    <MudTextField @bind-Value="_query.ProcessId" Label="ProcessId" T="string" Variant="Variant.Outlined"></MudTextField>
                                </th>
                                
                                <th>
                                    <MudTextField @bind-Value="_query.OperationId" Label="OperationId" T="string" Variant="Variant.Outlined"></MudTextField>
                                </th>
                                
                                     <th>
                                                                    <MudTextField @bind-Value="_query.Component" Label="Component" T="string" Variant="Variant.Outlined"></MudTextField>
                                                                </th>
                                
                                <th>
                                        <MudDateRangePicker  Label="Date Range" @bind-DateRange="_query.DateRange" />
                                </th>
                                
                                <th>
                                    <MudButton Variant="Variant.Outlined" OnClick="Query" Color="Color.Success">Query</MudButton>
                                </th>
                            </tr >
                            </tbody>
                        </MudSimpleTable>
</MudCardContent>

<MudTable Items="@Logs" Hover="true" Breakpoint="Breakpoint.Sm" Striped="true" Bordered="true"
          CustomHeader="true" CustomFooter="true" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered">

    <HeaderContent>
        <MudTHeadRow IgnoreCheckbox="true" Class="header-centered">
            <MudTh colspan="8">Trade Log</MudTh>
        </MudTHeadRow>
        <MudTHeadRow Class="header-centered">
            <MudTh colspan="2">Client info</MudTh>
            <MudTh colspan="5">Process info</MudTh>
            <MudTh colspan="1">Actions</MudTh>
        </MudTHeadRow>
        <MudTHeadRow>
            <MudTh>TraderId</MudTh>
            <MudTh>AccountId</MudTh>
            <MudTh>Component</MudTh>
            <MudTh>ProcessId</MudTh>
            <MudTh>OperationId</MudTh>
            <MudTh>Message</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Actions</MudTh>
        </MudTHeadRow>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Value.TraderId</MudTd>
        <MudTd DataLabel="Sign">@context.Value.AccountId</MudTd>
        <MudTd DataLabel="Sign">@context.Value.Component</MudTd>
        <MudTd DataLabel="Name">@context.Value.ProcessId</MudTd>
        <MudTd DataLabel="Name">@context.Value.OperationId</MudTd>
        <MudTd DataLabel="Molar mass">@context.Value.Message</MudTd>
        <MudTd DataLabel="Molar mass">@context.Value.Date</MudTd>
        <MudTd DataLabel="Molar mass">
            <MudButton Variant="Variant.Filled" OnClick="() => HandleUpdateShowData(context.Key)">Data</MudButton>
        </MudTd>
    </RowTemplate>
    <ChildRowContent>
        <MudTr>
            <td colspan="8">

                @if (context.Value.ShowDetails)
                {
                    if (context.Value.Data.Count == 0)
                    {
                        <MudGrid Class="d-flex justify-center">
                            <MudItem>
                                <h1>No data to display</h1>
                            </MudItem>
                        </MudGrid>
                        
                    }
                    else
                    {
                        <MudSimpleTable Hover="true" Bordered="true" Striped="false" Style="overflow-x: auto;">
                            <thead>
                            <tr>
                                @foreach (var dataKey in context.Value.Data.Keys)
                                {
                                    <th>@dataKey</th>
                                }
                            </tr>
                            </thead>
                            <tbody>

                            <tr>
                                @foreach (var row in context.Value.Data.Values)
                                {
                                    var (len, txt) = FormatJsonString(row);
                                    <th>
                                        <MudTextField T="string" Label="" Lines="@(len + 1)" Variant="Variant.Outlined" Text="@txt"/>
                                    </th>
                                }
                            </tr >
                            </tbody>
                        </MudSimpleTable>
                    }
                }
            </td>
        </MudTr>
    </ChildRowContent>
</MudTable>

@code
{
    public Dictionary<string, TradeLogModel> Logs = new ();
    private readonly TradeLogQuery _query = TradeLogQuery.CreateDefault();


    public async Task Query()
    {
        Console.WriteLine(JsonConvert.SerializeObject(_query.ToGrpc()));
        Logs = (await TradeLog.Query(_query.ToGrpc()).ResponseStream.ToListAsync()).Select(itm => new TradeLogModel(itm))
            .ToDictionary(itm => itm.Id, itm => itm);
    }

    private void HandleUpdateShowData(string src)
    {
        Logs[src].ShowDetails = !Logs[src].ShowDetails; 
        StateHasChanged();
    }


    private (int, string) FormatJsonString(string src)
    {
        var json = JsonConvert.DeserializeObject(src);
        var obj = JsonConvert.SerializeObject(json, Formatting.Indented);
        return (obj.Count(itm => itm.Equals('\n')), obj);
    }
}